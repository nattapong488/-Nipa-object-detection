/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BoundingBox', null, global);
goog.exportSymbol('proto.NvisionRequest', null, global);
goog.exportSymbol('proto.NvisionRequest.Configuration', null, global);
goog.exportSymbol('proto.NvisionRequest.EncodeType', null, global);
goog.exportSymbol('proto.ObjectDetection', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BoundingBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BoundingBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BoundingBox.displayName = 'proto.BoundingBox';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BoundingBox.prototype.toObject = function(opt_includeInstance) {
  return proto.BoundingBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BoundingBox} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BoundingBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    bottom: msg.getBottom(),
    left: msg.getLeft(),
    right: msg.getRight(),
    top: msg.getTop()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BoundingBox}
 */
proto.BoundingBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BoundingBox;
  return proto.BoundingBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BoundingBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BoundingBox}
 */
proto.BoundingBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBottom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BoundingBox} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BoundingBox.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BoundingBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BoundingBox.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBottom();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getLeft();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getRight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getTop();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.BoundingBox} The clone.
 */
proto.BoundingBox.prototype.cloneMessage = function() {
  return /** @type {!proto.BoundingBox} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 bottom = 1;
 * @return {number}
 */
proto.BoundingBox.prototype.getBottom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.BoundingBox.prototype.setBottom = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 left = 2;
 * @return {number}
 */
proto.BoundingBox.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.BoundingBox.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 right = 3;
 * @return {number}
 */
proto.BoundingBox.prototype.getRight = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.BoundingBox.prototype.setRight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 top = 4;
 * @return {number}
 */
proto.BoundingBox.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.BoundingBox.prototype.setTop = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ObjectDetection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ObjectDetection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ObjectDetection.displayName = 'proto.ObjectDetection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ObjectDetection.prototype.toObject = function(opt_includeInstance) {
  return proto.ObjectDetection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ObjectDetection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ObjectDetection.toObject = function(includeInstance, msg) {
  var f, obj = {
    croppedImage: msg.getCroppedImage_asB64(),
    boundingBox: (f = msg.getBoundingBox()) && proto.BoundingBox.toObject(includeInstance, f),
    name: msg.getName(),
    parent: msg.getParent(),
    confidence: msg.getConfidence()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ObjectDetection}
 */
proto.ObjectDetection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ObjectDetection;
  return proto.ObjectDetection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ObjectDetection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ObjectDetection}
 */
proto.ObjectDetection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCroppedImage(value);
      break;
    case 2:
      var value = new proto.BoundingBox;
      reader.readMessage(value,proto.BoundingBox.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ObjectDetection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ObjectDetection.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ObjectDetection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ObjectDetection.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCroppedImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BoundingBox.serializeBinaryToWriter
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getParent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getConfidence();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ObjectDetection} The clone.
 */
proto.ObjectDetection.prototype.cloneMessage = function() {
  return /** @type {!proto.ObjectDetection} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes cropped_image = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ObjectDetection.prototype.getCroppedImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes cropped_image = 1;
 * This is a type-conversion wrapper around `getCroppedImage()`
 * @return {string}
 */
proto.ObjectDetection.prototype.getCroppedImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCroppedImage()));
};


/**
 * optional bytes cropped_image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCroppedImage()`
 * @return {!Uint8Array}
 */
proto.ObjectDetection.prototype.getCroppedImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCroppedImage()));
};


/** @param {!(string|Uint8Array)} value  */
proto.ObjectDetection.prototype.setCroppedImage = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BoundingBox bounding_box = 2;
 * @return {proto.BoundingBox}
 */
proto.ObjectDetection.prototype.getBoundingBox = function() {
  return /** @type{proto.BoundingBox} */ (
    jspb.Message.getWrapperField(this, proto.BoundingBox, 2));
};


/** @param {proto.BoundingBox|undefined} value  */
proto.ObjectDetection.prototype.setBoundingBox = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ObjectDetection.prototype.clearBoundingBox = function() {
  this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.ObjectDetection.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ObjectDetection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.ObjectDetection.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string parent = 4;
 * @return {string}
 */
proto.ObjectDetection.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.ObjectDetection.prototype.setParent = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double confidence = 5;
 * @return {number}
 */
proto.ObjectDetection.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.ObjectDetection.prototype.setConfidence = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NvisionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NvisionRequest.repeatedFields_, null);
};
goog.inherits(proto.NvisionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NvisionRequest.displayName = 'proto.NvisionRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NvisionRequest.repeatedFields_ = [7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NvisionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NvisionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NvisionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NvisionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoding: msg.getEncoding(),
    serviceId: msg.getServiceId(),
    sourceId: msg.getSourceId(),
    frameId: msg.getFrameId(),
    createdAt: msg.getCreatedAt(),
    rawData: msg.getRawData_asB64(),
    targetClassesList: jspb.Message.getField(msg, 7),
    configurationsList: jspb.Message.toObjectList(msg.getConfigurationsList(),
    proto.NvisionRequest.Configuration.toObject, includeInstance),
    detectedObjectsList: jspb.Message.toObjectList(msg.getDetectedObjectsList(),
    proto.ObjectDetection.toObject, includeInstance),
    detectedFacesList: jspb.Message.toObjectList(msg.getDetectedFacesList(),
    proto.ObjectDetection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NvisionRequest}
 */
proto.NvisionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NvisionRequest;
  return proto.NvisionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NvisionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NvisionRequest}
 */
proto.NvisionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.NvisionRequest.EncodeType} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawData(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.getTargetClassesList().push(value);
      msg.setTargetClassesList(msg.getTargetClassesList());
      break;
    case 8:
      var value = new proto.NvisionRequest.Configuration;
      reader.readMessage(value,proto.NvisionRequest.Configuration.deserializeBinaryFromReader);
      msg.getConfigurationsList().push(value);
      msg.setConfigurationsList(msg.getConfigurationsList());
      break;
    case 9:
      var value = new proto.ObjectDetection;
      reader.readMessage(value,proto.ObjectDetection.deserializeBinaryFromReader);
      msg.getDetectedObjectsList().push(value);
      msg.setDetectedObjectsList(msg.getDetectedObjectsList());
      break;
    case 10:
      var value = new proto.ObjectDetection;
      reader.readMessage(value,proto.ObjectDetection.deserializeBinaryFromReader);
      msg.getDetectedFacesList().push(value);
      msg.setDetectedFacesList(msg.getDetectedFacesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NvisionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NvisionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NvisionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NvisionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getServiceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSourceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getFrameId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getRawData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getTargetClassesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = this.getConfigurationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.NvisionRequest.Configuration.serializeBinaryToWriter
    );
  }
  f = this.getDetectedObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ObjectDetection.serializeBinaryToWriter
    );
  }
  f = this.getDetectedFacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ObjectDetection.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.NvisionRequest} The clone.
 */
proto.NvisionRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.NvisionRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional EncodeType encoding = 1;
 * @return {!proto.NvisionRequest.EncodeType}
 */
proto.NvisionRequest.prototype.getEncoding = function() {
  return /** @type {!proto.NvisionRequest.EncodeType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.NvisionRequest.EncodeType} value  */
proto.NvisionRequest.prototype.setEncoding = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string service_id = 2;
 * @return {string}
 */
proto.NvisionRequest.prototype.getServiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.NvisionRequest.prototype.setServiceId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string source_id = 3;
 * @return {string}
 */
proto.NvisionRequest.prototype.getSourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.NvisionRequest.prototype.setSourceId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string frame_id = 4;
 * @return {string}
 */
proto.NvisionRequest.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.NvisionRequest.prototype.setFrameId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.NvisionRequest.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.NvisionRequest.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes raw_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.NvisionRequest.prototype.getRawData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes raw_data = 6;
 * This is a type-conversion wrapper around `getRawData()`
 * @return {string}
 */
proto.NvisionRequest.prototype.getRawData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawData()));
};


/**
 * optional bytes raw_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawData()`
 * @return {!Uint8Array}
 */
proto.NvisionRequest.prototype.getRawData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.NvisionRequest.prototype.setRawData = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated string target_classes = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.NvisionRequest.prototype.getTargetClassesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 7));
};


/** @param {Array.<string>} value  */
proto.NvisionRequest.prototype.setTargetClassesList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


proto.NvisionRequest.prototype.clearTargetClassesList = function() {
  jspb.Message.setField(this, 7, []);
};


/**
 * repeated Configuration configurations = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.NvisionRequest.Configuration>}
 */
proto.NvisionRequest.prototype.getConfigurationsList = function() {
  return /** @type{!Array.<!proto.NvisionRequest.Configuration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NvisionRequest.Configuration, 8));
};


/** @param {Array.<!proto.NvisionRequest.Configuration>} value  */
proto.NvisionRequest.prototype.setConfigurationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


proto.NvisionRequest.prototype.clearConfigurationsList = function() {
  this.setConfigurationsList([]);
};


/**
 * repeated ObjectDetection detected_objects = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ObjectDetection>}
 */
proto.NvisionRequest.prototype.getDetectedObjectsList = function() {
  return /** @type{!Array.<!proto.ObjectDetection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ObjectDetection, 9));
};


/** @param {Array.<!proto.ObjectDetection>} value  */
proto.NvisionRequest.prototype.setDetectedObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


proto.NvisionRequest.prototype.clearDetectedObjectsList = function() {
  this.setDetectedObjectsList([]);
};


/**
 * repeated ObjectDetection detected_faces = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ObjectDetection>}
 */
proto.NvisionRequest.prototype.getDetectedFacesList = function() {
  return /** @type{!Array.<!proto.ObjectDetection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ObjectDetection, 10));
};


/** @param {Array.<!proto.ObjectDetection>} value  */
proto.NvisionRequest.prototype.setDetectedFacesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


proto.NvisionRequest.prototype.clearDetectedFacesList = function() {
  this.setDetectedFacesList([]);
};


/**
 * @enum {number}
 */
proto.NvisionRequest.EncodeType = {
  BUFFER: 0,
  BASE64: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NvisionRequest.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NvisionRequest.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NvisionRequest.Configuration.displayName = 'proto.NvisionRequest.Configuration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NvisionRequest.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.NvisionRequest.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NvisionRequest.Configuration} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NvisionRequest.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameter: msg.getParameter(),
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NvisionRequest.Configuration}
 */
proto.NvisionRequest.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NvisionRequest.Configuration;
  return proto.NvisionRequest.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NvisionRequest.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NvisionRequest.Configuration}
 */
proto.NvisionRequest.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NvisionRequest.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NvisionRequest.Configuration.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NvisionRequest.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NvisionRequest.Configuration.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getParameter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.NvisionRequest.Configuration} The clone.
 */
proto.NvisionRequest.Configuration.prototype.cloneMessage = function() {
  return /** @type {!proto.NvisionRequest.Configuration} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string parameter = 1;
 * @return {string}
 */
proto.NvisionRequest.Configuration.prototype.getParameter = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.NvisionRequest.Configuration.prototype.setParameter = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.NvisionRequest.Configuration.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.NvisionRequest.Configuration.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto);
